generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model User {
  id                       String                    @id @default(cuid())
  name                     String
  email                    String                    @unique
  password                 String
  emailVerified            DateTime?
  image                    String?
  roleId                   String
  phone                    String
  workDivisionId           String
  employeeId               String                    @unique
  address                  String?
  residentId               String                    @unique
  nationality              String
  gender                   String                    @default("Unknown")
  isActive                 Boolean                   @default(true)
  birthplace               String?
  birthday                 DateTime
  lastLogin                DateTime?
  createdAt                DateTime                  @default(now())
  accounts                 Account[]
  activityHistories        ActivityHistory[]
  specificUser             ApprovalStep[]            @relation("SpecificUser")
  documentSignatures       DocumentSignature[]
  userSignedDocuments      Document[]                @relation("UserSignedDocuments")
  userDocuments            Document[]                @relation("UserDocuments")
  notifications            Notification[]
  signedDocuments          ProjectDocument[]         @relation("SignedDocuments")
  uploadedDocuments        ProjectDocument[]         @relation("UploadedDocuments")
  projectHistories         ProjectHistory[]          @relation("projectHistories")
  projects                 Project[]                 @relation("createdProjects")
  purchaseOrderHistories   PurchaseOrderHistory[]
  purchaseOrders           PurchaseOrder[]
  purchaseRequestApprovals PurchaseRequestApproval[]
  specificUserDetails      PurchaseRequestApproval[] @relation("SpecificUser")
  purchaseRequestHistories PurchaseRequestHistory[]
  purchaseRequests         PurchaseRequest[]
  sessions                 Session[]
  timelineItems            TimelineItem[]
  access                   UserAccess?
  certificates             UserCertificate[]
  userRoles                UserRole[]
  role                     Role                      @relation(fields: [roleId], references: [id])
  workDivision             WorkDivision              @relation("workDivisionUsers", fields: [workDivisionId], references: [id])
  workDivisionHeadOf       WorkDivision[]            @relation("workDivisionHead")

  @@index([roleId], map: "users_roleId_fkey")
  @@index([workDivisionId], map: "users_workDivisionId_fkey")
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Vendor {
  id                   String                @id @default(cuid())
  vendorCode           String                @unique
  vendorName           String
  address              String?
  phone                String
  email                String                @unique
  documents            String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  budgetedItems        BudgetedItem[]
  purchaseOrderItems   PurchaseOrderItem[]
  purchaseRequestItems PurchaseRequestItem[]

  @@map("vendors")
}

model Role {
  id                       String                    @id @default(cuid())
  roleCode                 String                    @unique
  roleName                 String
  description              String?
  upperLevel               String?
  budgetLimit              Float?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  approvalSteps            ApprovalStep[]
  purchaseRequestApprovals PurchaseRequestApproval[]
  userRoles                UserRole[]
  user                     User[]
  approvalSchemas          ApprovalSchema[]          @relation("ApprovalSchemaRoles")

  @@map("roles")
}

model WorkDivision {
  id                  String           @id @default(cuid())
  code                String           @unique
  name                String
  description         String?
  upperWorkDivisionId String?
  headId              String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  budgets             Budget[]
  projects            Project[]
  user                User[]           @relation("workDivisionUsers")
  head                User?            @relation("workDivisionHead", fields: [headId], references: [id])
  upperWorkDivision   WorkDivision?    @relation("upperWorkDivision", fields: [upperWorkDivisionId], references: [id])
  subDivisions        WorkDivision[]   @relation("upperWorkDivision")
  approvalSchemas     ApprovalSchema[] @relation("ApprovalSchemaWorkDivisions")

  @@index([headId], map: "work_divisions_headId_fkey")
  @@index([upperWorkDivisionId], map: "work_divisions_upperWorkDivisionId_fkey")
  @@map("work_divisions")
}

model ApprovalSchema {
  id              String         @id @default(cuid())
  name            String
  description     String?
  documentType    String
  workDivisionIds String
  roleIds         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  approvalSteps   ApprovalStep[]
  roles           Role[]         @relation("ApprovalSchemaRoles")
  workDivisions   WorkDivision[] @relation("ApprovalSchemaWorkDivisions")

  @@index([name])
  @@map("approval_schemas")
}

model ApprovalStep {
  id             String         @id @default(cuid())
  schemaId       String
  roleId         String
  specificUserId String?
  duration       Int
  overtimeAction String
  budgetLimit    Float?
  stepOrder      Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           Role           @relation(fields: [roleId], references: [id])
  schema         ApprovalSchema @relation(fields: [schemaId], references: [id])
  specificUser   User?          @relation("SpecificUser", fields: [specificUserId], references: [id])

  @@index([schemaId])
  @@index([roleId], map: "approval_steps_roleId_fkey")
  @@index([specificUserId], map: "approval_steps_specificUserId_fkey")
  @@map("approval_steps")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
  @@index([roleId], map: "user_roles_roleId_fkey")
  @@map("user_roles")
}

model Project {
  id             String            @id @default(cuid())
  code           String            @unique
  title          String
  description    String?
  workDivisionId String
  year           Int
  startDate      DateTime
  finishDate     DateTime
  status         String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  createdBy      String?
  budget         Budget?
  userDocuments  Document[]
  documents      ProjectDocument[]
  history        ProjectHistory[]
  createdByUser  User?             @relation("createdProjects", fields: [createdBy], references: [id])
  workDivision   WorkDivision      @relation(fields: [workDivisionId], references: [id])

  @@index([workDivisionId])
  @@index([createdBy])
  @@map("projects")
}

model ProjectDocument {
  id            String    @id @default(cuid())
  fileName      String
  fileUrl       String
  fileType      String?
  uploadedAt    DateTime  @default(now())
  uploadedBy    String
  projectId     String
  signedFileUrl String?
  signedAt      DateTime?
  signedBy      String?
  project       Project   @relation(fields: [projectId], references: [id])
  signedByUser  User?     @relation("SignedDocuments", fields: [signedBy], references: [id])
  uploader      User      @relation("UploadedDocuments", fields: [uploadedBy], references: [id])

  @@index([projectId])
  @@index([uploadedBy])
  @@index([signedBy])
  @@map("project_documents")
}

model ProjectHistory {
  id          String   @id @default(cuid())
  projectId   String
  projectCode String
  action      String
  changes     Json
  userId      String
  timestamp   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])
  user        User     @relation("projectHistories", fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@map("project_histories")
}

model Budget {
  id                    String            @id @default(cuid())
  code                  String            @unique
  projectId             String            @unique
  title                 String
  description           String?
  year                  Int
  workDivisionId        String
  totalBudget           Float
  startDate             DateTime
  finishDate            DateTime
  status                String
  purchaseRequestStatus String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  items                 BudgetedItem[]
  project               Project           @relation(fields: [projectId], references: [id])
  workDivision          WorkDivision      @relation(fields: [workDivisionId], references: [id])
  purchaseOrders        PurchaseOrder[]
  PurchaseRequest       PurchaseRequest[]

  @@index([projectId])
  @@index([workDivisionId])
  @@map("budgets")
}

model BudgetedItem {
  id                   String                @id @default(cuid())
  budgetId             String
  description          String
  qty                  Int
  unit                 String
  unitPrice            Float
  vendorId             String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  purchaseRequestId    String?
  budget               Budget                @relation(fields: [budgetId], references: [id])
  purchaseRequest      PurchaseRequest?      @relation(fields: [purchaseRequestId], references: [id])
  vendor               Vendor                @relation(fields: [vendorId], references: [id])
  purchaseOrderItems   PurchaseOrderItem[]
  purchaseRequestItems PurchaseRequestItem[]

  @@index([budgetId])
  @@index([purchaseRequestId])
  @@index([vendorId], map: "budgeted_items_vendorId_fkey")
  @@map("budgeted_items")
}

model UserAccess {
  id              String   @id @default(cuid())
  userId          String   @unique
  menuAccess      Json
  activityAccess  Json
  workspaceAccess Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_accesses")
}

model PurchaseRequest {
  id            String                    @id @default(cuid())
  code          String                    @unique
  budgetId      String
  title         String
  description   String?
  status        String
  createdBy     String
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  budgetedItems BudgetedItem[]
  purchaseOrder PurchaseOrder?
  approvalSteps PurchaseRequestApproval[]
  histories     PurchaseRequestHistory[]
  items         PurchaseRequestItem[]
  budget        Budget                    @relation(fields: [budgetId], references: [id])
  user          User                      @relation(fields: [createdBy], references: [id])

  @@index([budgetId])
  @@index([createdBy], map: "purchase_requests_createdBy_fkey")
  @@map("purchase_requests")
}

model PurchaseRequestItem {
  id                String          @id @default(cuid())
  purchaseRequestId String
  budgetItemId      String
  description       String
  qty               Int
  unit              String
  unitPrice         Float
  vendorId          String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  budgetItem        BudgetedItem    @relation(fields: [budgetItemId], references: [id])
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id])
  vendor            Vendor          @relation(fields: [vendorId], references: [id])

  @@index([purchaseRequestId])
  @@index([budgetItemId])
  @@index([vendorId], map: "purchase_request_items_vendorId_fkey")
  @@map("purchase_request_items")
}

model PurchaseRequestApproval {
  id                String          @id @default(cuid())
  purchaseRequestId String
  roleId            String
  specificUserId    String?
  stepOrder         Int
  status            String
  budgetLimit       Float?
  duration          Int
  overtimeAction    String
  comment           String?
  actedAt           DateTime?
  actorId           String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  actor             User?           @relation(fields: [actorId], references: [id])
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id])
  role              Role            @relation(fields: [roleId], references: [id])
  specificUser      User?           @relation("SpecificUser", fields: [specificUserId], references: [id])

  @@unique([purchaseRequestId, stepOrder])
  @@index([purchaseRequestId])
  @@index([actorId], map: "purchase_request_approvals_actorId_fkey")
  @@index([roleId], map: "purchase_request_approvals_roleId_fkey")
  @@index([specificUserId], map: "purchase_request_approvals_specificUserId_fkey")
  @@map("purchase_request_approvals")
}

model PurchaseRequestHistory {
  id                String          @id @default(cuid())
  purchaseRequestId String
  action            String
  actorId           String
  comment           String?
  createdAt         DateTime        @default(now())
  actor             User            @relation(fields: [actorId], references: [id])
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id])

  @@index([purchaseRequestId])
  @@index([actorId], map: "purchase_request_histories_actorId_fkey")
  @@map("purchase_request_histories")
}

model ActivityHistory {
  id         String   @id @default(cuid())
  userId     String
  entityType String
  entityId   String
  entityCode String?
  action     String
  details    Json
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType, entityId])
  @@index([timestamp])
  @@map("activity_histories")
}

model Document {
  id            String              @id @default(cuid())
  projectId     String?
  fileName      String
  fileUrl       String
  fileType      String?
  uploadedAt    DateTime            @default(now())
  uploadedBy    String
  signedFileUrl String?
  signedAt      DateTime?
  signedBy      String?
  entityId      String
  entityType    String
  fileData      Bytes?
  signatures    DocumentSignature[]
  project       Project?            @relation(fields: [projectId], references: [id])
  signedByUser  User?               @relation("UserSignedDocuments", fields: [signedBy], references: [id])
  uploader      User                @relation("UserDocuments", fields: [uploadedBy], references: [id])
  purchaseOrder PurchaseOrder?

  @@index([projectId], map: "documents_projectId_fkey")
  @@index([signedBy])
  @@index([uploadedBy])
  @@map("documents")
}

model DocumentSignature {
  id            String   @id @default(cuid())
  documentId    String
  userId        String
  signedAt      DateTime
  signedFileUrl String   @db.Text
  order         Int      @default(0)
  document      Document @relation(fields: [documentId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([documentId])
  @@index([userId])
  @@map("document_signatures")
}

model UserCertificate {
  id               String    @id @default(cuid())
  userId           String
  serialNumber     String    @unique
  p12cert          Bytes
  password         String
  issuedAt         DateTime  @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?
  revocationReason String?
  isActive         Boolean   @default(true)
  user             User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([serialNumber])
  @@map("user_certificates")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   @default("info")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("notifications")
}

model PurchaseOrder {
  id                String                 @id @default(cuid())
  code              String                 @unique
  title             String
  description       String?
  status            PurchaseOrderStatus    @default(Draft)
  userId            String
  budgetId          String
  purchaseRequestId String                 @unique
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  printCount        Int                    @default(0)
  documentId        String?                @unique
  histories         PurchaseOrderHistory[]
  items             PurchaseOrderItem[]
  budget            Budget                 @relation(fields: [budgetId], references: [id])
  document          Document?              @relation(fields: [documentId], references: [id])
  purchaseRequest   PurchaseRequest        @relation(fields: [purchaseRequestId], references: [id])
  user              User                   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([budgetId])
  @@index([purchaseRequestId])
  @@index([documentId])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  description     String
  qty             Int
  unit            String
  unitPrice       Float
  vendorId        String
  budgetItemId    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  budgetItem      BudgetedItem  @relation(fields: [budgetItemId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendor          Vendor        @relation(fields: [vendorId], references: [id])

  @@index([purchaseOrderId])
  @@index([budgetItemId])
  @@index([vendorId], map: "purchase_order_items_vendorId_fkey")
  @@map("purchase_order_items")
}

model PurchaseOrderHistory {
  id              String        @id @default(cuid())
  purchaseOrderId String
  action          String
  actorId         String
  comment         String?
  createdAt       DateTime      @default(now())
  actor           User          @relation(fields: [actorId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  @@index([purchaseOrderId])
  @@index([actorId], map: "purchase_order_histories_actorId_fkey")
  @@map("purchase_order_histories")
}

model TimelineItem {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  date        DateTime
  type        String
  isPublic    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdBy   String
  imageUrl    String?
  eventId     String?        @unique
  newsId      String?        @unique
  linkId      String?        @unique
  creator     User           @relation(fields: [createdBy], references: [id])
  event       TimelineEvent? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  link        TimelineLink?  @relation(fields: [linkId], references: [id], onDelete: Cascade)
  news        TimelineNews?  @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([createdBy], map: "timeline_items_createdBy_fkey")
  @@map("timeline_items")
}

model TimelineEvent {
  id           String        @id @default(cuid())
  location     String?
  startTime    DateTime?
  endTime      DateTime?
  organizer    String?
  isAllDay     Boolean       @default(false)
  timelineItem TimelineItem?

  @@map("timeline_events")
}

model TimelineNews {
  id           String        @id @default(cuid())
  source       String?
  url          String?
  content      String?       @db.Text
  timelineItem TimelineItem?

  @@map("timeline_news")
}

model TimelineLink {
  id           String        @id @default(cuid())
  url          String
  category     String?
  importance   Int           @default(0)
  timelineItem TimelineItem?

  @@map("timeline_links")
}

enum PurchaseOrderStatus {
  Draft
  Submitted
  Approved
  Completed
  Cancelled
}
