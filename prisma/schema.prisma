// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userRoles     UserRole[]
  role          String
  phone         String
  workDivision  String
  employeeId    String @unique
  address       String?
  residentId    String @unique
  nationality   String
  birthday      DateTime
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  access        UserAccess?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  @@map("verification_tokens")
}

model Vendor {
  id        String   @id @default(cuid())
  vendorCode String  @unique
  vendorName String
  address   String?
  phone     String
  email     String  @unique
  documents String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vendors")
}

model Role {
  id            String   @id @default(cuid())
  roleCode      String   @unique
  roleName      String
  description   String?
  upperLevel    String?
  approvalLimit Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userRoles     UserRole[]

  @@map("roles")
}

model WorkDivision {
  id            String   @id @default(cuid())
  divisionCode  String   @unique
  divisionName  String
  description   String?
  upperDivision String?
  divisionHead  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("work_divisions")
}

model ApprovalSchema {
  id            String   @id @default(cuid())
  name          String
  documentType  String   // 'Purchase Request' atau 'Memo'
  divisions     String   // Array of division codes
  roles         String? 
  title         String
  description   String?
  steps         ApprovalStep[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("approval_schemas")
}

model ApprovalStep {
  id            String   @id @default(cuid())
  schemaId      String
  role          String
  specificUserId String?
  limit         Float?
  duration      Int
  overtime      String   // 'Notify and Wait', 'Auto Approve', 'Auto Reject', 'Escalate'
  order         Int
  schema        ApprovalSchema @relation(fields: [schemaId], references: [id], onDelete: Cascade)

  @@map("approval_steps")
  @@index([schemaId])
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
  @@index([userId, roleId])
}

model Project {
  id          String   @id @default(cuid())
  projectId   String   @unique
  projectCode String
  projectTitle String
  description String?
  division    String
  year        Int
  startDate   DateTime
  finishDate  DateTime
  requestDate DateTime
  status      String
  budget      Budget?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("projects")
}


model Budget {
  id                    String            @id @default(cuid())
  projectId            String            @unique
  title                String
  description          String?
  year                 Int
  division             String
  totalBudget          Float
  startDate            DateTime
  finishDate           DateTime
  status               String            // e.g., "In Progress", "Completed", "Delayed"
  purchaseRequestStatus String?          // e.g., "Submitted", "Not Submitted"
  project              Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  items                BudgetedItem[]
  purchaseRequests     PurchaseRequest[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@map("budgets")
  @@index([projectId])
}

model BudgetedItem {
  id          String   @id @default(cuid())
  budgetId    String
  description String
  qty         Int
  unit        String
  unitPrice   Float
  vendor      String
  budget      Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("budgeted_items")
  @@index([budgetId])
}

model UserAccess {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  menuAccess     Json     @default("{}")
  activityAccess Json     @default("{}")
  workspaceAccess Json    @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("user_accesses")
  @@index([userId])
}

model PurchaseRequest {
  id              String                    @id @default(cuid())
  budgetId        String
  title           String
  description     String?
  status          String                    
  items           PurchaseRequestItem[]
  approvalSteps   PurchaseRequestApproval[]
  budget          Budget                    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt

  @@map("purchase_requests")
  @@index([budgetId])
}

model PurchaseRequestItem {
  id                String          @id @default(cuid())
  purchaseRequestId String
  description       String
  qty              Int
  unit             String
  unitPrice        Float
  vendor           String
  purchaseRequest  PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("purchase_request_items")
  @@index([purchaseRequestId])
}

model PurchaseRequestApproval {
  id                String          @id @default(cuid())
  purchaseRequestId String
  role             String
  specificUser     String?
  stepOrder        Int
  status           String          // e.g., "PENDING", "APPROVED", "REJECTED"
  limit            Int?            // in hours
  duration         Int?            // actual duration in hours
  overtime         Int?            // overtime duration in hours
  comment          String?
  approvedAt       DateTime?       // waktu approval/reject
  approvedBy       String?         // user yang approve/reject
  purchaseRequest  PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("purchase_request_approvals")
  @@index([purchaseRequestId])
}
