// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vendor {
  id        String   @id @default(cuid())
  vendorCode String  @unique
  vendorName String
  address   String?
  phone     String
  email     String  @unique
  documents String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vendors")
}

model Role {
  id            String   @id @default(cuid())
  roleCode      String   @unique
  roleName      String
  description   String?
  upperLevel    String?
  approvalLimit Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("roles")
}

model WorkDivision {
  id            String   @id @default(cuid())
  divisionCode  String   @unique
  divisionName  String
  description   String?
  upperDivision String?
  divisionHead  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("work_divisions")
}

model ApprovalSchema {
  id            String         @id @default(cuid())
  name          String
  documentType  String
  description   String?
  workDivisions Json          // Stored as JSON string
  roles         Json          // Stored as JSON string
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  steps         ApprovalStep[]

  @@map("approval_schemas")
}

model ApprovalStep {
  id             String        @id @default(cuid())
  schemaId       String
  stepNumber     Int
  roleId         String
  specificUserId String?
  budgetLimit    Float?
  duration       Int          // dalam jam
  overtimeAction String       // NOTIFY atau AUTO_REJECT
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  schema         ApprovalSchema @relation(fields: [schemaId], references: [id], onDelete: Cascade)

  @@map("approval_steps")
}
