// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onUpdate: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userRoles     UserRole[]
  role          String
  phone         String
  workDivision  String
  employeeId    String @unique
  address       String?
  residentId    String @unique
  nationality   String
  birthday      DateTime
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  access        UserAccess?
  purchaseRequests PurchaseRequest[]
  purchaseRequestApprovals PurchaseRequestApproval[]
  specificUserDetails PurchaseRequestApproval[] @relation("SpecificUser")
  purchaseRequestHistories PurchaseRequestHistory[]
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  @@map("verification_tokens")
}

model Vendor {
  id        String   @id @default(cuid())
  vendorCode String  @unique
  vendorName String
  address   String?
  phone     String
  email     String  @unique
  documents String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  budgetedItems BudgetedItem[]
  purchaseRequestItems PurchaseRequestItem[]

  @@map("vendors")
}

model Role {
  id            String   @id @default(cuid())
  roleCode      String   @unique
  roleName      String
  description   String?
  upperLevel    String?
  approvalLimit Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userRoles     UserRole[]

  @@map("roles")
}

model WorkDivision {
  id            String   @id @default(cuid())
  divisionCode  String   @unique
  divisionName  String
  description   String?
  upperDivision String?
  divisionHead  String?
  budgets       Budget[]
  projects      Project[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("work_divisions")
}

model ApprovalSchema {
  id            String   @id @default(cuid())
  name          String
  description   String?
  documentType  String
  approvalSteps ApprovalStep[]
  divisions     String   // Array of division codes
  roles         String? 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("approval_schemas")
  @@index([name])
}

model ApprovalStep {
  id              String   @id @default(cuid())
  schemaId        String
  schema          ApprovalSchema @relation(fields: [schemaId], references: [id], onUpdate: Cascade)
  role            String
  specificUserId  String?
  duration        Int
  overtimeAction  String
  limit           Float?
  order           Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("approval_steps")
  @@index([schemaId])
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onUpdate: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Project {
  id          String   @id @default(cuid())
  projectId   String   @unique
  projectCode String
  projectTitle String
  description String?
  workDivisionId String
  workDivision   WorkDivision @relation(fields: [workDivisionId], references: [id])
  year        Int
  startDate   DateTime
  finishDate  DateTime
  requestDate DateTime
  status      String
  budget      Budget?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("projects")
  @@index([workDivisionId])
}

model Budget {
  id            String   @id @default(cuid())
  projectId     String   @unique
  title         String
  description   String?
  year          Int
  workDivisionId String
  workDivision   WorkDivision @relation(fields: [workDivisionId], references: [id])
  totalBudget   Float
  startDate     DateTime
  finishDate    DateTime
  status        String   // e.g., "In Progress", "Completed", "Delayed"
  purchaseRequestStatus String? // e.g., "Submitted", "Not Submitted"
  project       Project  @relation(fields: [projectId], references: [id], onUpdate: Cascade)
  items         BudgetedItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  PurchaseRequest PurchaseRequest[]

  @@map("budgets")
  @@index([projectId])
  @@index([workDivisionId])
}

model BudgetedItem {
  id          String   @id @default(cuid())
  budgetId    String
  description String
  qty         Int
  unit        String
  unitPrice   Float
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onUpdate: Cascade)
  budget      Budget   @relation(fields: [budgetId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  purchaseRequestItems PurchaseRequestItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("budgeted_items")
  @@index([budgetId])
}

model UserAccess {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  
  // Menu Access
  menuAccess Json    @default("{}")
  
  // Activity Access
  activityAccess Json @default("{}")
  
  // Workspace Access
  workspaceAccess Json @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_accesses")
  @@index([userId])
}

model PurchaseRequest {
  id              String                    @id @default(cuid())
  code            String                    @unique
  budgetId        String
  title           String
  description     String?
  status          String                    // e.g., "Draft", "Submitted", "Approved", "Rejected"
  createdBy       String
  user            User                      @relation(fields: [createdBy], references: [id])
  items           PurchaseRequestItem[]
  approvalSteps   PurchaseRequestApproval[]
  budget          Budget                    @relation(fields: [budgetId], references: [id])
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  histories       PurchaseRequestHistory[]

  @@map("purchase_requests")
  @@index([budgetId])
}

model PurchaseRequestItem {
  id                String          @id @default(cuid())
  purchaseRequestId String
  budgetItemId      String
  description       String
  qty               Int
  unit              String
  unitPrice         Float
  vendorId          String
  vendor            Vendor          @relation(fields: [vendorId], references: [id], onUpdate: Cascade)
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onUpdate: Cascade)
  budgetItem        BudgetedItem    @relation(fields: [budgetItemId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("purchase_request_items")
  @@index([purchaseRequestId])
  @@index([budgetItemId])
}

model PurchaseRequestApproval {
  id                String          @id @default(cuid())
  purchaseRequestId String
  role             String
  specificUser     String?
  specificUserDetails User? @relation("SpecificUser", fields: [specificUser], references: [id])
  stepOrder        Int
  status           String          // e.g., "Pending", "Approved", "Rejected"
  limit            Int?            // budget limit that can be approved by the selected role
  duration         Int             // actual duration in days
  overtime         String          // overtime action
  comment          String?
  approvedAt       DateTime?       // waktu approval/reject
  approvedBy       String?         // optional field
  user             User?           @relation(fields: [approvedBy], references: [id])  // make relation optional
  purchaseRequest  PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onUpdate: Cascade)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("purchase_request_approvals")
  @@index([purchaseRequestId])
  @@unique([purchaseRequestId, stepOrder])
}

model PurchaseRequestHistory {
  id                String          @id @default(cuid())
  purchaseRequestId String
  action           String          // e.g., "SUBMITTED", "APPROVED", "DECLINED"
  actorId          String          // user yang melakukan action
  comment          String?         // optional comment
  createdAt        DateTime        @default(now())
  
  actor            User            @relation(fields: [actorId], references: [id])
  purchaseRequest  PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onUpdate: Cascade)

  @@map("purchase_request_histories")
  @@index([purchaseRequestId])
}
