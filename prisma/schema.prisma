// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userRoles     UserRole[]
  role          String
  phone         String
  workDivision  String
  employeeId    String
  address       String?
  residentId    String
  nationality   String
  birthday      DateTime
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vendor {
  id        String   @id @default(cuid())
  vendorCode String  @unique
  vendorName String
  address   String?
  phone     String
  email     String  @unique
  documents String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vendors")
}

model Role {
  id            String   @id @default(cuid())
  roleCode      String   @unique
  roleName      String
  description   String?
  upperLevel    String?
  approvalLimit Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userRoles     UserRole[]
}

model WorkDivision {
  id            String   @id @default(cuid())
  divisionCode  String   @unique
  divisionName  String
  description   String?
  upperDivision String?
  divisionHead  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("work_divisions")
}

model ApprovalSchema {
  id            String   @id @default(cuid())
  name          String
  documentType  String   // 'Purchase Request' atau 'Memo'
  divisions     String   // Array of division codes
  roles         String? 
  title         String
  description   String?
  steps         ApprovalStep[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("approval_schemas")
}

model ApprovalStep {
  id            String   @id @default(cuid())
  schemaId      String
  role          String
  limit         Float?   // Optional untuk Memo
  duration      Int
  overtime      String   // 'Notify and Wait', 'Auto Approve', 'Auto Reject', 'Escalate'
  order         Int
  schema        ApprovalSchema @relation(fields: [schemaId], references: [id], onDelete: Cascade)

  @@map("approval_steps")
  @@index([schemaId])
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Project {
  id          String   @id @default(cuid())
  projectId   String   @unique
  projectCode String
  projectTitle String
  description String?
  division    String
  year        Int
  startDate   DateTime
  finishDate  DateTime
  requestDate DateTime
  status      String
  budget      Budget?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Budget {
  id            String   @id @default(cuid())
  projectId     String   @unique
  title         String
  year          Int
  division      String
  totalBudget   Float
  startDate     DateTime
  finishDate    DateTime
  status        String   // e.g., "In Progress", "Completed", "Delayed"
  purchaseRequestStatus String? // e.g., "Submitted", "Not Submitted"
  project       Project  @relation(fields: [projectId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
